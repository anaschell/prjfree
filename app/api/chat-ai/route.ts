export const maxDuration = 30

export async function POST(req: Request) {
  const { message } = await req.json()

  if (!process.env.GROQ_API_KEY) {
    console.error("[v0] GROQ_API_KEY is not configured")
    return Response.json(
      {
        level: 3,
        response:
          "‚ö†Ô∏è Configuration manquante : La cl√© API Groq n'est pas configur√©e sur ce serveur.\n\n" +
          "üìã Pour activer le chatbot IA :\n" +
          "1. Cr√©ez un compte gratuit sur console.groq.com\n" +
          "2. G√©n√©rez une cl√© API\n" +
          "3. Ajoutez-la dans les variables d'environnement Vercel (GROQ_API_KEY)\n" +
          "4. Red√©ployez l'application\n\n" +
          "üìñ Consultez DEPLOYMENT.md pour les instructions d√©taill√©es.",
        error: "GROQ_API_KEY not configured",
        category: "Erreur syst√®me",
      },
      { status: 500 },
    )
  }

  console.log("[v0] Received message:", message)

  try {
    console.log("[v0] Step 1: Analyzing request to determine triage level...")

    const triageResponse = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "llama-3.3-70b-versatile",
        messages: [
          {
            role: "system",
            content: `Tu es un syst√®me de triage intelligent pour un service client de t√©l√©communications (Free).
Analyse la demande du client et d√©termine le niveau de routage appropri√© :

Niveau 1 - IA Autonome (70-80% des requ√™tes) :
- Requ√™tes informationnelles simples (horaires, tarifs, FAQ)
- Suivi de commande et statuts
- Questions sur la documentation
- Modifications de compte simples (changement d'adresse, email)
- Questions g√©n√©rales sur les offres et services

Niveau 2 - IA Assist√©e (15-20% des requ√™tes) :
- Demandes n√©cessitant validation humaine
- Probl√®mes techniques moyennement complexes
- Demandes de remboursement ou gestes commerciaux
- Modifications de forfait ou d'offre
- Questions sur la facturation avec anomalies

Niveau 3 - Humain Prioritaire (5-10% des requ√™tes) :
- Cas √©motionnels ou clients m√©contents/en col√®re
- N√©gociations commerciales complexes
- Probl√®mes techniques tr√®s complexes ou r√©currents
- Clients VIP ou √† risque de r√©siliation
- R√©clamations graves ou menaces l√©gales

R√©ponds UNIQUEMENT avec un JSON au format suivant :
{
  "level": 1 | 2 | 3,
  "reason": "Explication courte de la d√©cision",
  "category": "Cat√©gorie de la demande"
}

Ne r√©ponds qu'avec le JSON, rien d'autre.`,
          },
          {
            role: "user",
            content: message,
          },
        ],
        temperature: 0.3,
        max_tokens: 200,
      }),
    })

    if (!triageResponse.ok) {
      console.error("[v0] Triage API error:", triageResponse.status)
      throw new Error("Triage failed")
    }

    const triageData = await triageResponse.json()
    const triageResult = JSON.parse(triageData.choices[0]?.message?.content || '{"level": 3}')

    console.log("[v0] Triage result:", triageResult)

    if (triageResult.level === 3) {
      // Niveau 3: Immediate transfer to human with enriched context
      console.log("[v0] Level 3: Transferring to human agent")
      return Response.json({
        level: 3,
        response: "TRANSFER_TO_HUMAN",
        category: triageResult.category,
        reason: triageResult.reason,
      })
    }

    console.log("[v0] Generating AI response...")

    const aiResponse = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "llama-3.3-70b-versatile",
        messages: [
          {
            role: "system",
            content: `Tu es un assistant virtuel pour Free, l'op√©rateur t√©l√©com fran√ßais. 
      
Ton r√¥le est d'aider les clients avec leurs questions sur les services Free (internet, mobile, box, etc.).

Voici les informations que tu peux utiliser pour r√©pondre (bas√©es sur https://assistance.free.fr):

ABONNEMENT ET COMPTE:
- Factures: Consultables dans l'Espace Abonn√© sur free.fr, section "Mes factures"
- Mot de passe oubli√©: Cliquer sur "Mot de passe oubli√©" sur la page de connexion
- Modifier informations: Espace Abonn√© > "Mes informations"
- R√©siliation: Lettre recommand√©e avec AR √† Free, Service R√©siliation, 75371 Paris Cedex 08

INTERNET ET BOX:
- Probl√®me de connexion: V√©rifier branchements, red√©marrer la box (d√©brancher 30 secondes)
- WiFi lent: Se rapprocher de la box, utiliser la bande 5GHz, red√©marrer
- Mot de passe WiFi: Interface Freebox (mafreebox.freebox.fr) > WiFi > S√©curit√©
- Test de d√©bit: Disponible sur free.fr/assistance

MOBILE:
- Activer SIM: Appeler le 555 depuis le mobile Free ou via l'Espace Abonn√©
- Code PUK: Disponible dans l'Espace Abonn√© > "Ma ligne mobile"
- T√©l√©phone vol√©: Suspendre la ligne via l'Espace Abonn√© ou appeler le 3244

OFFRES:
- Freebox R√©volution Light: 19,99‚Ç¨/mois
- Freebox Pop: 29,99‚Ç¨/mois  
- Freebox Ultra: 39,99‚Ç¨/mois
- Forfaits mobile: de 2‚Ç¨ √† 19,99‚Ç¨/mois

R√©ponds de mani√®re claire, concise et professionnelle en fran√ßais.`,
          },
          {
            role: "user",
            content: message,
          },
        ],
        max_tokens: 500,
        temperature: 0.7,
      }),
    })

    if (!aiResponse.ok) {
      console.error("[v0] AI response error:", aiResponse.status)
      throw new Error("AI response failed")
    }

    const aiData = await aiResponse.json()
    const responseText = aiData.choices[0]?.message?.content || "Je n'ai pas pu g√©n√©rer une r√©ponse."

    console.log("[v0] AI response generated successfully")

    return Response.json({
      level: triageResult.level,
      response: responseText,
      category: triageResult.category,
      reason: triageResult.reason,
    })
  } catch (error) {
    console.error("[v0] Error generating AI response:", error)
    return Response.json(
      {
        level: 3,
        response: "TRANSFER_TO_HUMAN",
        category: "Erreur syst√®me",
        reason: "Erreur technique",
      },
      { status: 500 },
    )
  }
}
